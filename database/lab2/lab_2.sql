-- psql -h pg -d ucheb

-- Сделать запрос для получения атрибутов из указанных таблиц, применив фильтры по указанным условиям:
-- Таблицы: Н_ЛЮДИ, Н_СЕССИЯ.
-- Вывести атрибуты: Н_ЛЮДИ.ИД, Н_СЕССИЯ.УЧГОД.
-- Фильтры (AND): 
-- a) Н_ЛЮДИ.ИД < 152862.
-- b) Н_СЕССИЯ.ИД = 14.
-- Вид соединения: LEFT JOIN.
SELECT Н_ЛЮДИ.ИД, Н_СЕССИЯ.УЧГОД
FROM Н_ЛЮДИ
LEFT JOIN Н_СЕССИЯ ON Н_СЕССИЯ.ЧЛВК_ИД = Н_ЛЮДИ.ИД
WHERE (Н_ЛЮДИ.ИД < 152862 AND Н_СЕССИЯ.ИД = 14);


-- Сделать запрос для получения атрибутов из указанных таблиц, применив фильтры по указанным условиям:
-- Таблицы: Н_ЛЮДИ, Н_ОБУЧЕНИЯ, Н_УЧЕНИКИ.
-- Вывести атрибуты: Н_ЛЮДИ.ИМЯ, Н_ОБУЧЕНИЯ.ЧЛВК_ИД, Н_УЧЕНИКИ.НАЧАЛО.
-- Фильтры: (AND)
-- a) Н_ЛЮДИ.ОТЧЕСТВО = Александрович.
-- b) Н_ОБУЧЕНИЯ.ЧЛВК_ИД > 163276.
-- c) Н_УЧЕНИКИ.ИД = 1.
-- Вид соединения: INNER JOIN.
SELECT Н_ЛЮДИ.ИМЯ, Н_ОБУЧЕНИЯ.ЧЛВК_ИД, Н_УЧЕНИКИ.НАЧАЛО
FROM Н_ЛЮДИ
INNER JOIN Н_ОБУЧЕНИЯ ON Н_ЛЮДИ.ИД = Н_ОБУЧЕНИЯ.ЧЛВК_ИД
INNER JOIN Н_УЧЕНИКИ ON Н_ЛЮДИ.ИД = Н_УЧЕНИКИ.ЧЛВК_ИД
WHERE(Н_ЛЮДИ.ОТЧЕСТВО = 'Александрович' AND Н_ОБУЧЕНИЯ.ЧЛВК_ИД > 163276 AND Н_УЧЕНИКИ.ИД = 1);

-- Вывести число студентов вечерней формы обучения, которые младше 20 лет.
-- Ответ должен содержать только одно число.
--(для проверки можно ввести очную форму обучения)
SELECT COUNT(*) FROM Н_ЛЮДИ
WHERE (date_part('year', age("Н_ЛЮДИ"."ДАТА_РОЖДЕНИЯ" )) < 20 AND  Н_ЛЮДИ.ДАТА_СМЕРТИ < NOW()
    AND Н_ЛЮДИ.ИД IN
    (SELECT Н_УЧЕНИКИ.ИД FROM Н_УЧЕНИКИ 
        INNER JOIN Н_ОБУЧЕНИЯ ON Н_УЧЕНИКИ.ИД = Н_ОБУЧЕНИЯ.ЧЛВК_ИД
        WHERE(Н_УЧЕНИКИ.ИД IN 
            (SELECT Н_УЧЕНИКИ.ИД FROM Н_УЧЕНИКИ
            INNER JOIN Н_ПЛАНЫ ON Н_УЧЕНИКИ.ПЛАН_ИД=Н_ПЛАНЫ.ИД
            WHERE(Н_ПЛАНЫ.ИД IN (
                SELECT Н_ПЛАНЫ.ИД FROM Н_ПЛАНЫ
                INNER JOIN Н_ФОРМЫ_ОБУЧЕНИЯ ON Н_ПЛАНЫ.ФО_ИД=Н_ФОРМЫ_ОБУЧЕНИЯ.ИД
                WHERE(Н_ФОРМЫ_ОБУЧЕНИЯ.ИМЯ_В_ИМИН_ПАДЕЖЕ='вечерняя')))))));

-- Выдать различные отчества студентов и число людей с каждой из этих отчеств, ограничив список отчествами,
-- встречающимися более 10 раз на на "заочной" форме обучения.
-- Для реализации использовать подзапрос.
SELECT REPLACE(Н_ЛЮДИ.ОТЧЕСТВО, 'вна', 'вич') AS ОТЧЕСТВО, COUNT(*) AS КОЛИЧЕСТВО
FROM Н_ЛЮДИ
WHERE (Н_ЛЮДИ.ОТЧЕСТВО IN
    (SELECT REPLACE(Н_ЛЮДИ.ОТЧЕСТВО, 'вна', 'вич') AS ОТЧЕСТВО
    FROM Н_ЛЮДИ
    WHERE (Н_ЛЮДИ.ИД IN
        (SELECT Н_УЧЕНИКИ.ИД FROM Н_УЧЕНИКИ 
            INNER JOIN Н_ОБУЧЕНИЯ ON Н_УЧЕНИКИ.ИД = Н_ОБУЧЕНИЯ.ЧЛВК_ИД
            WHERE(Н_УЧЕНИКИ.ИД IN 
                (SELECT Н_УЧЕНИКИ.ИД FROM Н_УЧЕНИКИ
                INNER JOIN Н_ПЛАНЫ ON Н_УЧЕНИКИ.ПЛАН_ИД=Н_ПЛАНЫ.ИД
                WHERE(Н_ПЛАНЫ.ИД IN (
                    SELECT Н_ПЛАНЫ.ИД FROM Н_ПЛАНЫ
                    INNER JOIN Н_ФОРМЫ_ОБУЧЕНИЯ ON Н_ПЛАНЫ.ФО_ИД=Н_ФОРМЫ_ОБУЧЕНИЯ.ИД
                    WHERE(Н_ФОРМЫ_ОБУЧЕНИЯ.НАИМЕНОВАНИЕ='Очная')))))))
    GROUP BY REPLACE(Н_ЛЮДИ.ОТЧЕСТВО, 'вна', 'вич')
    HAVING count(*) > 10
))
GROUP BY REPLACE(Н_ЛЮДИ.ОТЧЕСТВО, 'вна', 'вич');



-- Выведите таблицу со средними оценками студентов группы 4100 (Номер, ФИО, Ср_оценка),
--  у которых средняя оценка больше максимальной оценк(е|и) в группе 3100.
SELECT Н_ЛЮДИ.ИД, Н_ЛЮДИ.ИМЯ, Н_ЛЮДИ.ФАМИЛИЯ, Н_ЛЮДИ.ОТЧЕСТВО, 
       SUM(CAST (Н_ОЦЕНКИ.КОД AS INT))/COUNT(CAST (Н_ОЦЕНКИ.КОД AS INT)) AS ОЦЕНКА 
FROM Н_ЛЮДИ
JOIN Н_ВЕДОМОСТИ ON Н_ЛЮДИ.ИД=Н_ВЕДОМОСТИ.ЧЛВК_ИД
JOIN Н_ОЦЕНКИ ON Н_ВЕДОМОСТИ.ОЦЕНКА=Н_ОЦЕНКИ.КОД
WHERE Н_ЛЮДИ.ИД IN (
    SELECT Н_ЛЮДИ.ИД FROM Н_ЛЮДИ
    WHERE Н_ЛЮДИ.ИД IN (
        SELECT Н_УЧЕНИКИ.ИД FROM Н_УЧЕНИКИ 
        WHERE Н_УЧЕНИКИ.ГРУППА= '4100'
    ) AND Н_ОЦЕНКИ.КОД IN ('2', '3', '4', '5')
)
GROUP BY Н_ЛЮДИ.ИД, Н_ЛЮДИ.ИМЯ, Н_ЛЮДИ.ФАМИЛИЯ, Н_ЛЮДИ.ОТЧЕСТВО
HAVING CAST((SUM(CAST (Н_ОЦЕНКИ.КОД AS INT))/COUNT(CAST (Н_ОЦЕНКИ.КОД AS INT))) AS INT) > (
    SELECT MAX(CAST (Н_ОЦЕНКИ.КОД AS INT)) FROM Н_ЛЮДИ
    INNER JOIN Н_ВЕДОМОСТИ ON Н_ЛЮДИ.ИД=Н_ВЕДОМОСТИ.ЧЛВК_ИД
    INNER JOIN Н_ОЦЕНКИ ON Н_ВЕДОМОСТИ.ОЦЕНКА=Н_ОЦЕНКИ.КОД
    WHERE (Н_ЛЮДИ.ИД IN(
        SELECT Н_ЛЮДИ.ИД FROM Н_ЛЮДИ
        WHERE (Н_ЛЮДИ.ИД IN
            (SELECT Н_УЧЕНИКИ.ИД FROM Н_УЧЕНИКИ 
                WHERE(Н_УЧЕНИКИ.ГРУППА= '3100'))))) AND Н_ОЦЕНКИ.КОД IN ('2', '3', '4', '5'));

            
-- Получить список студентов, отчисленных после первого сентября 2012 года
--  с очной или заочной формы обучения. 
-- В результат включить:
-- номер группы;
-- номер, фамилию, имя и отчество студента;
-- номер пункта приказа;
-- Для реализации использовать соединение таблиц.
-- (чтобы проверить правильность кода можно ввести не 2012, а 2000 год)
SELECT Н_УЧЕНИКИ.НАЧАЛО, Н_УЧЕНИКИ.ГРУППА, Н_УЧЕНИКИ.ИД as ИД_СТУДЕНТА, concat(Н_ЛЮДИ.ФАМИЛИЯ, ' ', Н_ЛЮДИ.ИМЯ, ' ', Н_ЛЮДИ.ОТЧЕСТВО) as  ФИО, concat(Н_УЧЕНИКИ.ПРИЗНАК) as ПРИКАЗ FROM Н_УЧЕНИКИ
         JOIN Н_ЛЮДИ ON Н_ЛЮДИ.ИД = Н_УЧЕНИКИ.ЧЛВК_ИД
         JOIN Н_ПЛАНЫ ON Н_УЧЕНИКИ.ПЛАН_ИД = Н_ПЛАНЫ.ИД
         JOIN Н_ФОРМЫ_ОБУЧЕНИЯ ON Н_ПЛАНЫ.ФО_ИД = Н_ФОРМЫ_ОБУЧЕНИЯ.ИД
         WHERE((Н_ФОРМЫ_ОБУЧЕНИЯ.НАИМЕНОВАНИЕ = 'Очная' OR Н_ФОРМЫ_ОБУЧЕНИЯ.НАИМЕНОВАНИЕ = 'Заочная') AND (Н_УЧЕНИКИ.ПРИЗНАК = 'отчисл') AND (DATE(Н_УЧЕНИКИ.НАЧАЛО)  > '2012-09-01'));


-- Вывести список людей, не являющихся или не являвшихся студентами ФКТИУ
--  (данные, о которых отсутствуют в таблице Н_УЧЕНИКИ). В запросе нельзя использовать DISTINCT.
SELECT concat(Н_ЛЮДИ.ИМЯ, ' ', Н_ЛЮДИ.ФАМИЛИЯ)
FROM Н_ЛЮДИ
WHERE Н_ЛЮДИ.ИД != ANY (SELECT Н_УЧЕНИКИ.ЧЛВК_ИД
                            FROM Н_УЧЕНИКИ
                                     JOIN Н_ПЛАНЫ ON Н_УЧЕНИКИ.ПЛАН_ИД = Н_ПЛАНЫ.ИД
                                     JOIN Н_ОТДЕЛЫ ON Н_ОТДЕЛЫ.ИД =  Н_ПЛАНЫ.ОТД_ИД
                                AND Н_ОТДЕЛЫ.КОРОТКОЕ_ИМЯ = 'КТиУ')
GROUP BY Н_ЛЮДИ.ИМЯ, Н_ЛЮДИ.ФАМИЛИЯ;


-- ДОП ЗАДАНИЕ

SELECT concat(Н_ЛЮДИ.ИМЯ, ' ', Н_ЛЮДИ.ФАМИЛИЯ, ' ', Н_ЛЮДИ.ПОЛ)
FROM Н_ЛЮДИ
WHERE(
    Н_ЛЮДИ.ПОЛ='Ж' 
    AND Н_ЛЮДИ.ИД IN (SELECT Н_ЛЮДИ.ИД FROM Н_ЛЮДИ
        WHERE(LENGTH(Н_ЛЮДИ.ИМЯ)
            - LENGTH(
                REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                    LOWER(Н_ЛЮДИ.ИМЯ), 'а', ''), 'е', ''), 'ё', ''), 'и', ''), 'о', ''), 'у', ''), 'э', ''), 'ю', ''), 'я', '')
            ))>2)
    AND Н_ЛЮДИ.ИД IN (
        SELECT Н_ЛЮДИ.ИД
        FROM Н_ЛЮДИ
        INNER JOIN Н_ВЕДОМОСТИ ON Н_ЛЮДИ.ИД=Н_ВЕДОМОСТИ.ЧЛВК_ИД
        INNER JOIN Н_СОДЕРЖАНИЯ_ЭЛЕМЕНТОВ_СТРОК ON Н_ВЕДОМОСТИ.СЭС_ИД=Н_СОДЕРЖАНИЯ_ЭЛЕМЕНТОВ_СТРОК.ИД
        INNER JOIN Н_ЭЛЕМЕНТЫ_СТРОК ON Н_СОДЕРЖАНИЯ_ЭЛЕМЕНТОВ_СТРОК.ЭСТ_ИД = Н_ЭЛЕМЕНТЫ_СТРОК.ИД
        INNER JOIN Н_СТРОКИ_ПЛАНОВ ON Н_ЭЛЕМЕНТЫ_СТРОК.СПЛ_ИД = Н_СТРОКИ_ПЛАНОВ.ИД
        INNER JOIN Н_ДИСЦИПЛИНЫ ON Н_СТРОКИ_ПЛАНОВ.ДИС_ИД = Н_ДИСЦИПЛИНЫ.ИД
        WHERE(Н_ВЕДОМОСТИ.ОЦЕНКА='незач' AND Н_ЭЛЕМЕНТЫ_СТРОК.НОМЕР_СЕМЕСТРА=1 AND Н_ДИСЦИПЛИНЫ.НАИМЕНОВАНИЕ='Физическая культура')
    )
);



SELECT concat(Н_ЛЮДИ.ИМЯ, ' ', Н_ЛЮДИ.ФАМИЛИЯ, ' ', Н_ЛЮДИ.ОТЧЕСТВО, ' ', Н_ОБУЧЕНИЯ.ЧЛВК_ИД)
FROM Н_ЛЮДИ
INNER JOIN Н_ОБУЧЕНИЯ ON Н_ЛЮДИ.ИД = Н_ОБУЧЕНИЯ.ЧЛВК_ИД
INNER JOIN Н_УЧЕНИКИ ON Н_ЛЮДИ.ИД = Н_УЧЕНИКИ.ЧЛВК_ИД
WHERE(Н_ЛЮДИ.ОТЧЕСТВО = 'Александрович' and Н_УЧЕНИКИ.ПРИЗНАК='отчисл');

SELECT concat(Н_ЛЮДИ.ИМЯ, ' ', Н_ЛЮДИ.ФАМИЛИЯ, ' ', Н_ЛЮДИ.ОТЧЕСТВО, ' ', Н_ЛЮДИ.ИД)
FROM Н_ЛЮДИ
NATURAL JOIN Н_УЧЕНИКИ;

SELECT concat(Н_ЛЮДИ.ИМЯ, ' ', Н_ЛЮДИ.ФАМИЛИЯ, ' ', Н_ЛЮДИ.ОТЧЕСТВО, ' ', Н_ЛЮДИ.ИД)
FROM Н_ЛЮДИ
INNER JOIN Н_УЧЕНИКИ ON Н_ЛЮДИ.ИД = Н_УЧЕНИКИ.ЧЛВК_ИД;